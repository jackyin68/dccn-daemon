// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dcmgr/v1/grpc/dcmgr.proto

package dcmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/Ankr-network/dccn-common/protos/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DCStreamerClient is the client API for DCStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DCStreamerClient interface {
	ServerStream(ctx context.Context, opts ...grpc.CallOption) (DCStreamer_ServerStreamClient, error)
}

type dCStreamerClient struct {
	cc *grpc.ClientConn
}

func NewDCStreamerClient(cc *grpc.ClientConn) DCStreamerClient {
	return &dCStreamerClient{cc}
}

func (c *dCStreamerClient) ServerStream(ctx context.Context, opts ...grpc.CallOption) (DCStreamer_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DCStreamer_serviceDesc.Streams[0], "/dcmgr.DCStreamer/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCStreamerServerStreamClient{stream}
	return x, nil
}

type DCStreamer_ServerStreamClient interface {
	Send(*common.Event) error
	Recv() (*common.Event, error)
	grpc.ClientStream
}

type dCStreamerServerStreamClient struct {
	grpc.ClientStream
}

func (x *dCStreamerServerStreamClient) Send(m *common.Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dCStreamerServerStreamClient) Recv() (*common.Event, error) {
	m := new(common.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DCStreamerServer is the server API for DCStreamer service.
type DCStreamerServer interface {
	ServerStream(DCStreamer_ServerStreamServer) error
}

func RegisterDCStreamerServer(s *grpc.Server, srv DCStreamerServer) {
	s.RegisterService(&_DCStreamer_serviceDesc, srv)
}

func _DCStreamer_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DCStreamerServer).ServerStream(&dCStreamerServerStreamServer{stream})
}

type DCStreamer_ServerStreamServer interface {
	Send(*common.Event) error
	Recv() (*common.Event, error)
	grpc.ServerStream
}

type dCStreamerServerStreamServer struct {
	grpc.ServerStream
}

func (x *dCStreamerServerStreamServer) Send(m *common.Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dCStreamerServerStreamServer) Recv() (*common.Event, error) {
	m := new(common.Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DCStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcmgr.DCStreamer",
	HandlerType: (*DCStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _DCStreamer_ServerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dcmgr/v1/grpc/dcmgr.proto",
}

func init() { proto.RegisterFile("dcmgr/v1/grpc/dcmgr.proto", fileDescriptor_dcmgr_8c3c3761483a905f) }

var fileDescriptor_dcmgr_8c3c3761483a905f = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0x49, 0xce, 0x4d,
	0x2f, 0xd2, 0x2f, 0x33, 0xd4, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x07, 0xf3, 0xf4, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0x58, 0xc1, 0x1c, 0x29, 0xa1, 0xe4, 0xfc, 0xdc, 0xdc, 0xfc, 0x3c, 0xfd, 0xd4,
	0xb2, 0xd4, 0xbc, 0x12, 0x88, 0x94, 0x91, 0x0f, 0x17, 0x97, 0x8b, 0x73, 0x70, 0x49, 0x51, 0x6a,
	0x62, 0x6e, 0x6a, 0x91, 0x90, 0x1d, 0x17, 0x4f, 0x70, 0x6a, 0x51, 0x59, 0x6a, 0x11, 0x44, 0x44,
	0x48, 0x58, 0x0f, 0xa2, 0x05, 0xa2, 0x58, 0xcf, 0x15, 0xa4, 0x51, 0x0a, 0x9b, 0xa0, 0x12, 0x83,
	0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0x58, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x39,
	0xb2, 0xf5, 0x8c, 0x00, 0x00, 0x00,
}
