# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # Build in Python container to install AWS CLI
      - image: circleci/python:2.7.15-stretch
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: copy ssh key
          command: |
            cp ${HOME}/.ssh/id_rsa id_rsa
      - run:
          name: Install AWSCLI
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region $AWS_REGION)
      - run:
          name: Install Kops and Kubectl
          command: |
            wget -O kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/kops
            wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: "Build & Push Docker Image, rollout on K8s and test"
          command: |
            set -x

            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            SHA1_SHORT=$(git rev-parse --short HEAD)
            DATE=`date +%Y%m%d%H%M%S`
            if [[ ($BRANCH_NAME == "master") ]]
            then
              BRANCH_NAME="stage"
              URL_BRANCH="dc.dccn.ankr.network"
              K8S_CLUSTER="daemon"
            elif [[ ($BRANCH_NAME == "develop") ]]
            then
              BRANCH_NAME="dev"
              URL_BRANCH="dc-stage.dccn.ankr.network"
              K8S_CLUSTER="stage.daemon"
            else
              BRANCH_NAME="feat"
              URL_BRANCH="dc-dev.dccn.ankr.network"
              K8S_CLUSTER="dev.daemon"
            fi
            docker build --build-arg URL_BRANCH=${URL_BRANCH} -t dccn-daemon:$BRANCH_NAME .
            for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
              docker tag dccn-daemon:$BRANCH_NAME $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/dccn-daemon:$TAG
              docker push $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/dccn-daemon:$TAG
            done

            kops export kubecfg --name ${K8S_CLUSTER}.k8s.ankr.network --state s3://kops.${K8S_CLUSTER}.config
            kubectl patch deployment/dccn-daemon -p \
            '{"spec":{"template":{"spec":{"containers":[{"name":"dccn-daemon","image":"'${AWS_ACCOUNT}'.dkr.ecr.'${AWS_REGION}'.amazonaws.com/dccn-daemon:'${BRANCH_NAME}'"}]}}}}'
            if ! kubectl rollout status deploy/dccn-daemon; then
              echo "Deploy failed, roll back to previous version"
              kubectl rollout undo deploy/dccn-daemon 
            fi


            
#   test:
#     docker:
#   deploy-dev:
#     docker:
#   deploy-test:
#     docker:

# workflows:
#   version: 2
#   build-deploy:
#     jobs:
#       - build
#       - test:
#           requires:
#             - build
#       - deploy-dev:
#           requires:
#             - test
#           filters:
#             branches:
#               only: develop
#       - hold:
#           type: approval
#           requires:
#             - test
#           filters:
#             branches:
#               ignore:
#                 - develop
#                 - master
#       - deploy-dev:
#           requires:
#             - hold
#           filters:
#             branches:
#               only:
#                 - /feature.*/