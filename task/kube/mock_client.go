// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Ankr-network/dccn-daemon/task/kube (interfaces: Client)

// Package kube is a generated GoMock package.
package kube

import (
	context "context"
	types "github.com/Ankr-network/dccn-daemon/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Deploy mocks base method
func (m *MockClient) Deploy(arg0 *types.ManifestGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy
func (mr *MockClientMockRecorder) Deploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockClient)(nil).Deploy), arg0)
}

// Inventory mocks base method
func (m *MockClient) Inventory() ([]Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inventory")
	ret0, _ := ret[0].([]Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inventory indicates an expected call of Inventory
func (mr *MockClientMockRecorder) Inventory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inventory", reflect.TypeOf((*MockClient)(nil).Inventory))
}

// ListDeployments mocks base method
func (m *MockClient) ListDeployments() ([]string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeployments indicates an expected call of ListDeployments
func (mr *MockClientMockRecorder) ListDeployments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockClient)(nil).ListDeployments))
}

// Metering mocks base method
func (m *MockClient) Metering() (map[string]*types.ResourceUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metering")
	ret0, _ := ret[0].(map[string]*types.ResourceUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metering indicates an expected call of Metering
func (mr *MockClientMockRecorder) Metering() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metering", reflect.TypeOf((*MockClient)(nil).Metering))
}

// ServiceLogs mocks base method
func (m *MockClient) ServiceLogs(arg0 context.Context, arg1 int64, arg2 bool) ([]*ServiceLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*ServiceLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceLogs indicates an expected call of ServiceLogs
func (mr *MockClientMockRecorder) ServiceLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceLogs", reflect.TypeOf((*MockClient)(nil).ServiceLogs), arg0, arg1, arg2)
}

// ServiceStatus mocks base method
func (m *MockClient) ServiceStatus(arg0 string) (*types.ServiceStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceStatus", arg0)
	ret0, _ := ret[0].(*types.ServiceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceStatus indicates an expected call of ServiceStatus
func (mr *MockClientMockRecorder) ServiceStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStatus", reflect.TypeOf((*MockClient)(nil).ServiceStatus), arg0)
}

// TeardownNamespace mocks base method
func (m *MockClient) TeardownNamespace() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeardownNamespace")
	ret0, _ := ret[0].(error)
	return ret0
}

// TeardownNamespace indicates an expected call of TeardownNamespace
func (mr *MockClientMockRecorder) TeardownNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownNamespace", reflect.TypeOf((*MockClient)(nil).TeardownNamespace))
}
