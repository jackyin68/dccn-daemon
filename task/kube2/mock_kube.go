// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Ankr-network/dccn-daemon/task/kube2 (interfaces: Kube)

// Package kube is a generated GoMock package.
package kube

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kubernetes "k8s.io/client-go/kubernetes"
	reflect "reflect"
)

// MockKube is a mock of Kube interface
type MockKube struct {
	ctrl     *gomock.Controller
	recorder *MockKubeMockRecorder
}

// MockKubeMockRecorder is the mock recorder for MockKube
type MockKubeMockRecorder struct {
	mock *MockKube
}

// NewMockKube creates a new mock instance
func NewMockKube(ctrl *gomock.Controller) *MockKube {
	mock := &MockKube{ctrl: ctrl}
	mock.recorder = &MockKubeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKube) EXPECT() *MockKubeMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockKube) Create(arg0 kubernetes.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockKubeMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKube)(nil).Create), arg0)
}

// DeleteCollection mocks base method
func (m *MockKube) DeleteCollection(arg0 kubernetes.Interface, arg1 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockKubeMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockKube)(nil).DeleteCollection), arg0, arg1)
}

// List mocks base method
func (m *MockKube) List(arg0 kubernetes.Interface, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List
func (mr *MockKubeMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKube)(nil).List), arg0, arg1)
}

// Update mocks base method
func (m *MockKube) Update(arg0 kubernetes.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockKubeMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKube)(nil).Update), arg0)
}
